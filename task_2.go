// Задание 2. Graceful shutdown

// Цель задания:
// Научиться правильно останавливать приложения.

// Что нужно сделать:

// -В работе часто возникает потребность правильно останавливать приложения. Например, когда наш сервер обслуживает соединения, а нам хочется, чтобы все текущие соединения были обработаны и лишь потом произошло выключение сервиса. Для этого существует паттерн graceful shutdown.
// -Напишите приложение, которое выводит квадраты натуральных чисел на экран, а после получения сигнала ^С обрабатывает этот сигнал,
// пишет «выхожу из программы» и выходит.

// Советы и рекомендации:
// Для реализации данного паттерна воспользуйтесь каналами и оператором select с default-кейсом.

// Что оценивается:
// Код выводит квадраты натуральных чисел на экран, после получения ^С происходит обработка сигнала и выход из программы.

package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
)

// func main() {
// 	c := make(chan os.Signal, 2)
// 	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

// 	for {
// 		select {
// 		case <-c:
// 			fmt.Println("Выхожу из программы")
// 			return
// 		case <-time.After(5 * time.Second):
// 			go func() {
// 				for i := 1; ; i++ {
// 					fmt.Println(i * i)
// 				}
// 			}()
// 		}
// 	}
// }

func main() {
	cancel := make(chan os.Signal, 2)
	signal.Notify(cancel, os.Interrupt, syscall.SIGTERM)

	go func() {
		for i := 1; ; i++ {
			time.Sleep(time.Second)
			fmt.Println(i * i)
		}
	}()

	<-cancel

	fmt.Println("Выхожу из программы")
	os.Exit(0)
}
